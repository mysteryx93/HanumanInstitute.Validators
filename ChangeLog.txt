What's New

v1.2.2       2023-03-19
- Cloning.DeepClone now uses Json serializer instead of Xml serializer, and take an optional parameter to take a Json Source Generator context. The new parameter is optional but must be explicitly set because it is highly recommended to set a Source Generator context for performance. You will see all the places where it is being used, and if you don't want to use the new feature, specify null.
- Cloning.ShallowCopy has been marked as obsolete as it relies on reflection and is slower than DeepCopy. Use DeepCopy instead.

v1.2.1       2022-08-18
- Removed ExtensionMethods.CopyAllFields as it could cause naming conflicts.
- Added Cloning static class with: CopyAllFields, ShallowClone (reflection) and DeepClone (serialization).
- Fixed a bug with ICommand.Execute().

v1.2.0       2022-06-04
- Moved extension methods back to namespace HanumanInstitute.Validators. Use global usings to make them easily accessible.
- Added RangeClusiveAttribute

v1.1.0       2022-01-25
- Moved all extension methods to namespace System to be easily accessible.
- Added attributes to improve code analysis in user code.
- Added ICommand extensions methods.
- Changed license to MIT.

v1.0.8       2020-10-28
- CastList now implements INotifyPropertyChanged and INotifyCollectionChanged and forwards events if the base list implements those interfaces

v1.0.7       2020-10-26
- Removed CastList type restriction, making it possible to convert from derived to base type.

v1.0.6       2020-10-26
- Added IList<T>.CastList<TTo, T>() to create a casted list that exposes a derived type while maintaining the same references.

v1.0.5       2020-10-15
- string.Parse method now correctly returns null for invalid values

v1.0.4       2020-10-02
- XML code documentation was missing! Fixed.

v1.0.3       2020-10-02
- Preconditions now correctly work on nullable types

v1.0.2       2020-10-02
- ForEachOrderedAsync now works on any IEnumerable

v1.0.1       2020-10-02
- String.Default() now works on nullable strings
- String.EqualsInvariant() now works on any object and calls ToStringInvariant
